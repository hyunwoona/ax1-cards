{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["defHandStyle","maxHeight","minHeight","maxWidth","padding","createNewHand","cards","i","forEach","j","push","rank","suit","a","length","Math","floor","random","shuffle","ExerciseLabel","topCard","this","props","rep","exercise","style","fontSize","textAlign","React","Component","App","state","usedCards","handleUpdateCards","bind","handleResetCards","e","newCard","setState","slice","concat","currentCard","margin","hidden","cardOffset","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAMMA,EAAe,CACnBC,UAAU,OACVC,UAAU,OAEVC,SAAS,QACTC,QAAS,GAWX,SAASC,IAEP,IADA,IAAIC,EAAQ,GADW,WAEdC,GACR,CAAC,GAAI,GAAI,GAAI,GAAGC,SAAQ,SAACC,GACvBH,EAAMI,KAAK,CACTC,KAAKF,EAAGG,KAAML,QAHVA,EAAI,EAAGA,EAAI,IAAKA,EAAI,EAApBA,GAQT,OAlBF,SAAiBM,GACf,IAAK,IAAIN,EAAIM,EAAEC,OAAS,EAAGP,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIM,KAAKC,MAAMD,KAAKE,UAAYV,EAAI,IADP,EAEpB,CAACM,EAAEJ,GAAII,EAAEN,IAAvBM,EAAEN,GAFgC,KAE5BM,EAAEJ,GAF0B,KAIvC,OAAOI,EAaAK,CAAQZ,G,IAGXa,E,uKACM,IACDC,EAAWC,KAAKC,MAAhBF,QACP,IAAKA,EACH,OAAO,4BAHF,IAKAT,EAAcS,EAAdT,KASHY,EAPY,CAAC,GAAI,GAAI,GAAI,IAFRH,EAARR,MAUTY,EAPiB,CACnB,GAAM,cACN,GAAM,oBACN,GAAM,aACN,EAAK,wBAGuBb,GAE9B,OAAO,uBAAGc,MAAO,CAACC,SAAU,OAAQC,UAAW,WAAxC,UAAuDJ,EAAvD,YAA8DC,Q,GAlB7CI,IAAMC,WA2FnBC,E,kDAnEb,WAAYR,GAAQ,IAAD,8BAChB,cAAMA,IAEDS,MAAQ,CACVzB,MAAOD,IACP2B,UAAW,IAEd,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBARR,E,8DAWDE,GAChB,IAAIC,EAAUhB,KAAKU,MAAMzB,MAAMe,KAAKU,MAAMzB,MAAMQ,OAAS,GACzDO,KAAKiB,UAAS,SAACP,GACb,MAAO,CACLzB,MAAOyB,EAAMzB,MAAMiC,MAAM,EAAGR,EAAMzB,MAAMQ,OAAO,GAC/CkB,UAAWD,EAAMC,UAAUQ,OAAOH,S,uCAKvBD,GACf,GAAIf,KAAKU,MAAMzB,MAAMQ,OAAQ,CAC3B,IAAI2B,EAAcpB,KAAKU,MAAMC,UAAUX,KAAKU,MAAMC,UAAUlB,OAAS,GACrEO,KAAKiB,UAAS,SAACP,GACb,MAAO,CACLzB,MAAOyB,EAAMzB,MAAMkC,OAAOC,GAC1BT,UAAWD,EAAMC,UAAUO,MAAM,EAAGR,EAAMC,UAAUlB,OAAS,YAIjEO,KAAKiB,UAAS,SAAAP,GACZ,MAAO,CACLzB,MAAOD,IACP2B,UAAW,S,+BAOhB,OACG,yBAAKP,MAAO,CAACiB,OAAQ,WACnB,kBAAC,OAAD,CACEpC,MAAOe,KAAKU,MAAMzB,MAClBqC,QAAQ,EACRlB,MAAOzB,EACP4C,WAAY,GACZC,QAASxB,KAAKY,oBAGhB,kBAAC,OAAD,CACE3B,MAAOe,KAAKU,MAAMC,UAClBW,QAAQ,EACRlB,MAAOzB,EACP4C,WAAY,GACZC,QAASxB,KAAKc,mBAGhB,kBAAC,EAAD,CACEf,QAASC,KAAKU,MAAMC,UAAUlB,QAAUO,KAAKU,MAAMC,UAAUX,KAAKU,MAAMC,UAAUlB,OAAS,U,GA7DrFc,IAAMC,WC9CJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2b2b41ec.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nimport { Hand, Card, CardBack } from 'react-deck-o-cards';\n\nconst defHandStyle = {\n  maxHeight:'34vh',\n  minHeight:'34vh',\n\n  maxWidth:'100vw',\n  padding: 0,\n};\n\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nfunction createNewHand() {\n  let cards = [];\n  for (let i = 0; i < 4; ++i) {\n   [11, 12, 13, 1].forEach((j) => {\n     cards.push({\n       rank:j, suit: i\n     });\n   });\n  }\n\n  return shuffle(cards);\n}\n\nclass ExerciseLabel extends React.Component {\n  render() {\n    const {topCard} = this.props;\n    if (!topCard) {\n      return <p></p>;\n    }\n    const {rank, suit} = topCard;\n\n    let suitToRep = [20, 12, 15, 10];\n    let rankToExercise = {\n      '11': 'Jump Squats',\n      '12': 'Mountain Climbers',\n      '13': 'High Knees',\n      '1': 'Heels to the Heavens'\n    }\n    let rep = suitToRep[suit];\n    let exercise = rankToExercise[rank];\n\n    return <p style={{fontSize: '24px', textAlign: 'center'}}>{`${rep} ${exercise}`}</p>;\n  }\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n     super(props);\n\n     this.state = {\n        cards: createNewHand(),\n        usedCards: [],\n     }\n     this.handleUpdateCards = this.handleUpdateCards.bind(this);\n     this.handleResetCards = this.handleResetCards.bind(this);\n  }\n\n  handleUpdateCards(e) {\n    let newCard = this.state.cards[this.state.cards.length - 1];\n    this.setState((state) => {\n      return {\n        cards: state.cards.slice(0, state.cards.length-1),\n        usedCards: state.usedCards.concat(newCard),\n      };\n    });\n  }\n\n  handleResetCards(e) {\n    if (this.state.cards.length) {\n      let currentCard = this.state.usedCards[this.state.usedCards.length - 1];\n      this.setState((state) => {\n        return {\n          cards: state.cards.concat(currentCard),\n          usedCards: state.usedCards.slice(0, state.usedCards.length - 1),\n        };\n      });\n    } else {\n      this.setState(state => {\n        return {\n          cards: createNewHand(),\n          usedCards: [],\n        };\n      });\n    }\n  }\n\n  render() {\n     return (\n        <div style={{margin: '0 16px'}}>\n          <Hand\n            cards={this.state.cards}\n            hidden={false}\n            style={defHandStyle}\n            cardOffset={10}\n            onClick={this.handleUpdateCards}\n          />\n\n          <Hand\n            cards={this.state.usedCards}\n            hidden={false}\n            style={defHandStyle}\n            cardOffset={10}\n            onClick={this.handleResetCards}\n          />\n\n          <ExerciseLabel\n            topCard={this.state.usedCards.length && this.state.usedCards[this.state.usedCards.length - 1]}\n          />\n        </div>\n     );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}